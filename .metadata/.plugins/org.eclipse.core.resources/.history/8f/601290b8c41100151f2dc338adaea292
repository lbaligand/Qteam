package tangiblegame;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.lang.Math;
import java.util.Random;

import processing.core.PApplet;
import processing.core.PImage;
import processing.video.Capture;
import processing.video.Movie;
import processing.core.PGraphics;
import processing.core.PVector;

@SuppressWarnings("serial")
public class ImageProcessing extends PApplet{

	// Global arguments
	PImage img;
	QuadGraph quadGraph = new QuadGraph();
	PGraphics leftImage;
	PGraphics middleImage;
	PGraphics rightImage;
	TwoDThreeD adapter;
	
	// Global variables to enable drawing the spectra of the Hough transform
	int rDim, phiDim;
	int[] accumulator;
	
	// Arguments for binary & invertedBinary thresholds
	int lowThreshold;
	int highThreshold;
	
	// Arguments for threshold bars
	HScrollbar lowThresholdBar;
	HScrollbar highThresholdBar;
	
	//Capture cam;
	Movie camera;

	public void setup() {
		
		size(640, 480);
		//cam = new Capture(this, 640, 480);
		//cam.start();
		
		adapter = new TwoDThreeD(640, 480);

		camera = new Movie(this, "testvideo.mp4");
		camera.loop();
		
		/* =========================================================
		 * MILESTONE 3:
		//img = loadImage("board1.jpg");
		
		leftImage = createGraphics(100, 100);
		middleImage = createGraphics(100, 100);
		rightImage = createGraphics(100, 100);
		========================================================= */
		
		/* To enable threshold bars 
		lowThresholdBar = new HScrollbar(this, 0, 580, 800, 20);
		highThresholdBar = new HScrollbar(this, 0, 540, 800, 20);
		*/
		
	}
	
	public void draw() {
		background(color(0, 0, 0));

		if(camera.available() == true) {
			camera.read();
		}
		PImage img = camera.get();
		PImage sobelResult = sobel(intensityThreshold(blur(HSBThreshold(camera.get()))));
		
		image(img, 0, 0);
		
		List<PVector> lines = hough(intensityThreshold(sobelResult), 4);
		List<PVector> intersections = getIntersections(lines, img.width, img.height);
		
		/* =====================================================================
		 * MILESTONE 3 :
		PImage sobelResult = sobel(intensityThreshold(blur(HSBThreshold(img))));
		
		// Left image
		leftImage.beginDraw();
		leftImage.background(color(0, 0, 0));
		image(img, 0, 0);
		List<PVector> lines = hough(intensityThreshold(sobelResult), 4);
		List<PVector> intersections = getIntersections(lines, img.width, img.height);
		leftImage.endDraw();

		// Middle image
		pushMatrix();
		translate(img.width, 0);
		middleImage.beginDraw();
		middleImage.background(color(0, 0, 0));
		PImage spectrum = spectraHough(rDim, phiDim, accumulator, sobelResult);
		spectrum.resize(img.width / 2, img.height / 2);
		image(spectrum, 0, 0);
		middleImage.endDraw();
		popMatrix();
		
		// Right image
		pushMatrix();
		translate(img.width, img.height / 2);
		rightImage.beginDraw();
		rightImage.background(color(0, 0, 0));
		sobelResult.resize(img.width / 2, img.height / 2);
		image(sobelResult, 0, 0);
		rightImage.endDraw();
		popMatrix();
	
		// Display quad graphs (optional)
		quadGraph.build(lines, img.width, img.height);
		displayQuad(quadGraph.findCycles(), lines);
		==================================================================== */
		
		/* For threshold bars (not compatible with the whole program)
		 lowThresholdBar.display();
		 lowThresholdBar.update();
		 highThresholdBar.display();
		 highThresholdBar.update();
		 lowThreshold = (int) (255 * lowThresholdBar.getPos());
		 highThreshold = (int) (255 * highThresholdBar.getPos());
		 if (lowThresholdBar.getPos() > highThresholdBar.getPos()) {
		 int thresholdy = highThreshold;
		 highThreshold = lowThreshold;
		 lowThreshold = thresholdy;
		 }
		 */
	}

	public PImage binaryFilter(PImage img) {
		
		PImage result = createImage(img.width, img.height, RGB);
		result.loadPixels();
		
		for (int i = 0; i < img.width * img.height; i++) {
			float currentBrightness = brightness(img.pixels[i]);
			if (currentBrightness > lowThreshold) {
				result.pixels[i] = color(255);
			} else {
				result.pixels[i] = color(0);
			}
		}
		
		result.updatePixels();
		return result;
		
	}

	public PImage invertedBinaryFilter(PImage img) {
		
		PImage result = createImage(img.width, img.height, RGB);
		result.loadPixels();
		
		for (int i = 0; i < img.width * img.height; i++) {
			float currentBrightness = brightness(img.pixels[i]);
			if (currentBrightness <= lowThreshold) {
				result.pixels[i] = color(255);
			} else {
				result.pixels[i] = color(0);
			}
		}
		
		result.updatePixels();
		return result;
		
	}

	public PImage HSBThreshold(PImage img) {

		// Threshold values (low & high) for hue, saturation & brightness.
		float lowSat = 70;
		float highSat = 255;
		float lowHue = 90;
		float highHue = 140;
		float lowBright = 30;
		float highBright = 180;

		PImage hueMap = createImage(img.width, img.height, HSB);
		hueMap.loadPixels();
		
		for (int i = 0; i < img.width * img.height; i++) {
			float currentBrightness = brightness(img.pixels[i]);
			float currentSat = saturation(img.pixels[i]);
			float currentHue = hue(img.pixels[i]);
			// Thresholding
			if (currentBrightness < lowBright || currentBrightness > highBright
					|| currentSat < lowSat || currentSat > highSat
					|| currentHue < lowHue || currentHue > highHue) {
				hueMap.pixels[i] = color(0);
			} else {
				hueMap.pixels[i] = color(255);
			}
		}

		hueMap.updatePixels();
		return hueMap;
		
	}

	@SuppressWarnings("unused")
	public PImage convolute(PImage img) {

		float[][] kernel = { { 0, 0, 0 }, { 0, 2, 0 }, { 0, 0, 0 } };
		float[][] kernel2 = { { 0, 1, 0 }, { 1, 0, 1 }, { 0, 1, 0 } };
		float[][] kernel3 = { { 9, 12, 9 }, { 12, 15, 12 }, { 9, 12, 9 } };

		float weight = 1.f;
		int N = kernel3.length;

		PImage result = createImage(img.width, img.height, ALPHA);
		result.loadPixels();
		
		for (int x = N / 2; x < img.width - N / 2; x++) {
			for (int y = N / 2; y < img.height - N / 2; y++) {
				for (int i = -N / 2; i <= N / 2; i++) {
					for (int j = -N / 2; j <= N / 2; j++) {
						result.pixels[x + y * img.width] += kernel3[i + (N / 2)][j
								+ (N / 2)]
								* brightness(img.pixels[x + y * img.width + i
										+ j * img.width]);
					}
				}
				result.pixels[x + y * img.width] = color(result.pixels[x + y
						* img.width]
						/ weight);
			}
		}

		result.updatePixels();
		return result;
	}

	public PImage blur(PImage img) {

		float[][] blur = { { 1, 1, 1 }, { 1, 1, 1 }, { 1, 1, 1 } };

		float weight = 9.f;
		int N = blur.length;

		PImage result = createImage(img.width, img.height, ALPHA);
		result.loadPixels();
		
		for (int x = N / 2; x < img.width - N / 2; x++) {
			for (int y = N / 2; y < img.height - N / 2; y++) {
				for (int i = -N / 2; i <= N / 2; i++) {
					for (int j = -N / 2; j <= N / 2; j++) {
						result.pixels[x + y * img.width] += blur[i + (N / 2)][j
								+ (N / 2)]
								* brightness(img.pixels[x + y * img.width + i
										+ j * img.width]);
					}
				}
				result.pixels[x + y * img.width] = color(result.pixels[x + y
						* img.width]
						/ weight);
			}
		}

		result.updatePixels();
		return result;
		
	}

	public PImage intensityThreshold(PImage img) {

		// Intensity threshold to filter isolated pixels
		int threshold = 128;

		PImage result = createImage(img.width, img.height, HSB);
		result.loadPixels();
		
		for (int i = 0; i < img.width * img.height; i++) {
			float currentBrightness = brightness(img.pixels[i]);
			if (currentBrightness >= threshold) {
				result.pixels[i] = color(255);
			} else {
				result.pixels[i] = color(0);
			}
		}

		result.updatePixels();
		return result;
		
	}

	public PImage sobel(PImage img) {

		float[][] hKernel = { { 0, 1, 0 }, { 0, 0, 0 }, { 0, -1, 0 } };
		float[][] vKernel = { { 0, 0, 0 }, { 1, 0, -1 }, { 0, 0, 0 } };

		PImage result = createImage(img.width, img.height, ALPHA);

		// clear the image
		for (int i = 0; i < img.width * img.height; i++) {
			result.pixels[i] = color(0);
		}

		float max = 0;
		float[] buffer = new float[img.width * img.height];

		// Double convolution
		int N = hKernel.length;

		for (int x = N / 2; x < img.width - N / 2; x++) {
			for (int y = N / 2; y < img.height - N / 2; y++) {
				float sum_h = 0, sum_v = 0;
				for (int i = -N / 2; i <= N / 2; i++) {
					for (int j = -N / 2; j <= N / 2; j++) {
						sum_h += hKernel[i + (N / 2)][j + (N / 2)]
								* brightness(img.pixels[x + y * img.width + i
										+ j * img.width]);
						sum_v += vKernel[i + (N / 2)][j + (N / 2)]
								* brightness(img.pixels[x + y * img.width + i
										+ j * img.width]);
					}
				}
				buffer[x + y * img.width] = sqrt(pow(sum_h, 2) + pow(sum_v, 2));
				if (sqrt(pow(sum_h, 2) + pow(sum_v, 2)) > max) {
					max = sqrt(pow(sum_h, 2) + pow(sum_v, 2));
				}
			}
		}

		for (int y = 2; y < img.height - 2; y++) { // Skip top and bottom edges
			for (int x = 2; x < img.width - 2; x++) { // Skip left and right
				if (buffer[y * img.width + x] > (int) (max * 0.3f)) {
					result.pixels[y * img.width + x] = color(255);
				} else {
					result.pixels[y * img.width + x] = color(0);
				}
			}
		}
		
		return result;
		
	}

	public ArrayList<PVector> getIntersections(List<PVector> lines, int width, int height) {

		ArrayList<PVector> intersections = new ArrayList<PVector>();

		for (int i = 0; i < lines.size() - 1; i++) {
			PVector line1 = lines.get(i);
			for (int j = i + 1; j < lines.size(); j++) {
				PVector line2 = lines.get(j);

				// compute the intersection and add it to 'intersections'
				float d = cos(line2.y) * sin(line1.y) - cos(line1.y)
						* sin(line2.y);
				float x = (line2.x * sin(line1.y) - line1.x * sin(line2.y)) / d;
				float y = (-line2.x * cos(line1.y) + line1.x * cos(line2.y))
						/ d;

				// control if the intersection is in the image
				if(x >= 0 && y >= 0 && x <= width && y <= height) {
					intersections.add(new PVector(x, y));
				}

				// MILESTONE 4 : DOES NOT DRAW THE INTERSECTIONS
				// draw the intersection
				fill(255, 128, 0);
				ellipse(x, y, 10, 10);
			}
		}

		return intersections;
	}

	public ArrayList<PVector> hough(PImage edgeImg, int nLines) {

		float discretizationStepsPhi = 0.06f;
		float discretizationStepsR = 2.5f;

		// dimensions of the accumulator
		phiDim = (int) (Math.PI / discretizationStepsPhi);
		rDim = (int) (((edgeImg.width + edgeImg.height) * 2 + 1) / discretizationStepsR);
		// our accumulator (with a 1 pix margin around)
		accumulator = new int[(phiDim + 2) * (rDim + 2)];

		// =============================================================================
		// Pre-compute the sin and cos values : OPTIMIZATION
		
		float[] tabSin = new float[phiDim];
		float[] tabCos = new float[phiDim];

		float ang = 0;
		float inverseR = 1.f / discretizationStepsR;

		for (int accPhi = 0; accPhi < phiDim; ang += discretizationStepsPhi, accPhi++) {
			tabSin[accPhi] = (float) (sin(ang) * inverseR);
			tabCos[accPhi] = (float) (cos(ang) * inverseR);
		}
		// ==============================================================================

		// Fill the accumulator: on edge points (ie, white pixels of the edge
		// image), store all possible (r, phi) pairs describing lines going
		// through the point.
		for (int y = 0; y < edgeImg.height; y++) {
			for (int x = 0; x < edgeImg.width; x++) {
				if (brightness(edgeImg.pixels[y * edgeImg.width + x]) != 0) {
					for (int phi = 0; phi < phiDim; phi++) {
						float r = (float) (tabCos[phi] * x + tabSin[phi] * y);
						int realR = round(r + (rDim - 1) * 0.5f);
						accumulator[(phi + 1) * (rDim + 2) + realR]++;
					}
				}
			}
		}

		// Only search around lines with more that this amount of votes
		int minVotes = 180;
		
		HoughComparator comparator = new HoughComparator(accumulator);
		
		ArrayList<Integer> bestCandidates = new ArrayList<Integer>();

		for (int i = 0; i < accumulator.length; ++i) {
			if (accumulator[i] > minVotes) {
				bestCandidates.add(i);
			}
		}
		
		// ======================================================================================
		// Local maxima : OPTIMIZATION
		
		// size of the region we search for a local maximum
		int neighbourhood = 20;
		
		for (int accR = 0; accR < rDim; accR++) {
			for (int accPhi = 0; accPhi < phiDim; accPhi++) {
				// compute current index in the accumulator
				int idx = (accPhi + 1) * (rDim + 2) + accR + 1;
				if (accumulator[idx] > minVotes) {
					boolean bestCandidate = true;
					// iterate over the neighbourhood
					for (int dPhi = -neighbourhood / 2; dPhi < neighbourhood / 2 + 1; dPhi++) {
						// check we are not outside the image
						if (accPhi + dPhi < 0 || accPhi + dPhi >= phiDim)
							continue;
						for (int dR = -neighbourhood / 2; dR < neighbourhood / 2 + 1; dR++) {
							// check we are not outside the image
							if (accR + dR < 0 || accR + dR >= rDim)
								continue;
							int neighbourIdx = (accPhi + dPhi + 1) * (rDim + 2)
									+ accR + dR + 1;
							if (accumulator[idx] <= accumulator[neighbourIdx]) {
								// the current idx is not a local maximum!
								bestCandidate = false;
								break;
							}
						}
						if (!bestCandidate)
							break;
					}
					if (bestCandidate) {
						// the current idx *is* a local maximum
						bestCandidates.add(idx);
					}
				}
			}

		}
		// ======================================================================================

		Collections.sort(bestCandidates, comparator);
		
		ArrayList<PVector> lines = new ArrayList<PVector>();
		
		// For each pair (r, ϕ) in the accumulator that received more that 180
		// votes, plot the corresponding line on top of the image
		for (int idx = 0; idx < Math.min(bestCandidates.size(), nLines); idx++) {

			// first, compute back the (r, phi) polar coordinates:
			int accPhi = (int) (bestCandidates.get(idx) / (rDim + 2)) - 1;
			int accR = bestCandidates.get(idx) - (accPhi + 1) * (rDim + 2) - 1;
			float r = (accR - (rDim - 1) * 0.5f) * discretizationStepsR;
			float phi = accPhi * discretizationStepsPhi;

			lines.add(new PVector(r, phi));

			// Cartesian equation of a line: y = ax + b
			// in polar, y = (-cos(phi)/sin(phi))x + (r/sin(phi))
			// => y = 0 : x = r / cos(phi)
			// => x = 0 : y = r / sin(phi)
			// compute the intersection of this line with the 4 borders of
			// the image
			int x0 = 0;
			int y0 = (int) (r / sin(phi));
			int x1 = (int) (r / cos(phi));
			int y1 = 0;
			int x2 = edgeImg.width;
			int y2 = (int) (-cos(phi) / sin(phi) * x2 + r / sin(phi));
			int y3 = edgeImg.width;
			int x3 = (int) (-(y3 - r / sin(phi)) * (sin(phi) / cos(phi)));

			// MILESTONE 4 : DOES NOT PLOT THE LINES
			// Finally, plot the lines
			stroke(204, 102, 0);
			if (y0 > 0) {
				if (x1 > 0)
					line(x0, y0, x1, y1);
				else if (y2 > 0)
					line(x0, y0, x2, y2);
				else
					line(x0, y0, x3, y3);
			} else {
				if (x1 > 0) {
					if (y2 > 0)
						line(x1, y1, x2, y2);
					else
						line(x1, y1, x3, y3);
				} else
					line(x2, y2, x3, y3);
			}
		}

		return lines;
	}
	
	/*
	 *  MILESTONE 3 : Middle image
	 */
	public PImage spectraHough(int rDim, int phiDim, int [] accumulator, PImage edgeImg) {
		
				PImage houghImg = createImage(rDim + 2, phiDim + 2, ALPHA);
				 
				for (int i = 0; i < accumulator.length; i++) { 
					houghImg.pixels[i] = color(min(255, accumulator[i])); 
				}
				 
				houghImg.updatePixels(); 
				
				return houghImg;
	}


	public PVector intersection(PVector line1, PVector line2) {
		
		// compute the intersection
		float d = cos(line2.y) * sin(line1.y) - cos(line1.y)
				* sin(line2.y);
		float x = (line2.x * sin(line1.y) - line1.x * sin(line2.y)) / d;
		float y = (-line2.x * cos(line1.y) + line1.x * cos(line2.y))
				/ d;
		
		return new PVector(x, y);
	}
	
	@SuppressWarnings("static-access")
	public void displayQuad(List<int[]> quads, List<PVector> lines) {
		
		for (int[] quad : quads) {
			
			PVector l1 = lines.get(quad[0]);
			PVector l2 = lines.get(quad[1]);
			PVector l3 = lines.get(quad[2]);
			PVector l4 = lines.get(quad[3]);
			
			PVector c12 = intersection(l1, l2);
			PVector c23 = intersection(l2, l3);
			PVector c34 = intersection(l3, l4);
			PVector c41 = intersection(l4, l1);
			
			//Filter the quads that are not convex, too small or non flat
			boolean isValid = (quadGraph.isConvex(c12, c23, c34, c41) && 
					quadGraph.validArea(c12, c23, c34, c41, 1000000, 50000) && quadGraph.nonFlatQuad(c12, c23, c34, c41));
			
			if(isValid) {
				// Choose a random, semi-transparent colour
				Random random = new Random();
				fill(color(min(255, random.nextInt(300)),
					min(255, random.nextInt(300)),
					min(255, random.nextInt(300)), 50));
			
				quad(c12.x, c12.y, c23.x, c23.y, c34.x, c34.y, c41.x, c41.y);
			}
		}

	}

	/* MILESTONE 4 :
	 * Return the two rotation angles (as a 2D PVector) after having processed the input Image
	 */
	@SuppressWarnings("static-access")
	public PVector getPlateRotation(PImage inputImg) {
		// Initialize the current object
		this.init();
		
		// Apply Sobel's Algorithm to the input image
		PImage sobelOutput = sobel(intensityThreshold(blur(HSBThreshold(inputImg))));
		
		// Compute the lines & intersections
		List<PVector> lines = hough(intensityThreshold(sobelOutput), 4);
		List<PVector> intersections = getIntersections(lines, inputImg.width, inputImg.height);
		
		// If the edge detection was properly done
		if(intersections.size() >= 4) {
			System.out.println("GOOD");
			intersections = adapter.sortCorners(intersections);
			return adapter.get3DRotations(intersections);
		}
		
		return null;
		
	}
	
}
